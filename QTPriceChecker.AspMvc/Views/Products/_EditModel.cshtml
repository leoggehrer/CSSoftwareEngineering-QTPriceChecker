@*@CustomCode*@
@model QTPriceChecker.AspMvc.Models.Base.Product

<style>
    .row {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    h3 {
        margin-top: 20px;
    }
</style>

<div class="row">
    <div class="col-md-4">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input asp-for="Id" type="hidden" />
        <div class="form-group">
            <label asp-for="Number" class="control-label"></label>
            <input asp-for="Number" class="form-control" />
            <span asp-validation-for="Number" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Designation" class="control-label"></label>
            <input asp-for="Designation" class="form-control" />
            <span asp-validation-for="Designation" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Description" class="control-label"></label>
            <input asp-for="Description" class="form-control" />
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Quantity" class="control-label"></label>
            <input asp-for="Quantity" class="form-control" />
            <span asp-validation-for="Quantity" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Unit" class="control-label"></label>
            @{
                var valuesUnit = Enum.GetValues(typeof(QTPriceChecker.Logic.Modules.Common.UnitOfMeasure)).Cast<QTPriceChecker.Logic.Modules.Common.UnitOfMeasure>().Select(e => new SelectListItem(e.ToString(), e.ToString()));
            }
            @Html.DropDownListFor(m => m.Unit, valuesUnit, null, new { @class = "form-select" })
            <span asp-validation-for="Unit" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="State" class="control-label"></label>
            @{
                var valuesState = Enum.GetValues(typeof(QTPriceChecker.Logic.Modules.Common.State)).Cast<QTPriceChecker.Logic.Modules.Common.State>().Select(e => new SelectListItem(e.ToString(), e.ToString()));
            }
            @Html.DropDownListFor(m => m.State, valuesState, null, new { @class = "form-select" })
            <span asp-validation-for="State" class="text-danger"></span>
        </div>
    </div>
</div>
@if (Model.Id > 0)
{
    <hr />
    <h3>Supplier(s) @Html.ActionLink(string.Empty, "AddSupplier", "ProductXSuppliers", new { productId=Model.Id }, new { @class="btn btn-sm btn-outline-success fa fa-plus"})</h3>
    <p></p>
    foreach (var item in Model.ProductXSuppliers.OrderBy(e => e.CurrentPrice))
    {
        var id = item.Id.ToString();
        var currPrice = item.CurrentPrice;
        var accoSupp = $"{item.Supplier?.Name}";
        var accoPrice = $"{currPrice.ToString("f2")} EUR";

        <div class="accordion" id="@($"accordion{id}")">
            <div class="accordion-item">
                <h2 class="accordion-header" id="@($"heading{id}")">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="@($"#collaps{id}")" aria-expanded="true" aria-controls="@($"collaps{id}")">
                        <dl class="row">
                            <dt class="col-sm-8">@accoSupp</dt>
                            <dd>@accoPrice</dd>
                        </dl>
                    </button>
                </h2>
                <div id="@($"collaps{id}")" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="@($"#accordion{1}")">
                    <div class="accordion-body">
                        @{
                            var lastPrice = Decimal.MinValue;
                            var queryPriceHistory = item.PriceHistories.OrderBy(e => e.From).Select(e =>
                            {
                                var style = string.Empty;
                                var priceInfo = string.Empty;

                                if (lastPrice != Decimal.MinValue)
                                {
                                    if (lastPrice > e.Price)
                                    {
                                        style += "color: green;";
                                        priceInfo += $"- {Math.Abs(lastPrice - e.Price)} EUR";
                                    }
                                    else if (lastPrice < e.Price)
                                    {
                                        style += "color: red;";
                                        priceInfo += $"+ {Math.Abs(lastPrice - e.Price)} EUR";
                                    }
                                    else
                                    {
                                        style += "color: grey;";
                                        priceInfo += "=";
                                    }
                                }
                                lastPrice = e.Price;
                                return new { Model = e, Style = style, PriceInfo = priceInfo };
                            });
                            <p>@Html.ActionLink("Add price", "AddPrice", "PriceHistories", new { productId=Model.Id, productXSupplierId=item.Id }, new { @class="btn btn-sm btn-outline-primary"})</p>
                            foreach (var innerItem in queryPriceHistory.Reverse())
                            {
                                <dl class="row" style="@innerItem.Style">
                                    <dt class="col-sm-4">
                                        @innerItem.Model.From.ToString()
                                    </dt>
                                    <dd class="col-sm-2">
                                        @innerItem.Model.Price.ToString("f2") EUR
                                    </dd>
                                    <dd class="col-sm-2">
                                        @innerItem.PriceInfo
                                    </dd>
                                </dl>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}
