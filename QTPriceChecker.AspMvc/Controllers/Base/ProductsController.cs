//@GeneratedCode
namespace QTPriceChecker.AspMvc.Controllers.Base
{
    using Microsoft.AspNetCore.Mvc;
    using TAccessModel = QTPriceChecker.Logic.Entities.Base.Product;
    using TViewModel = QTPriceChecker.AspMvc.Models.Base.Product;
    using TFilterModel = QTPriceChecker.AspMvc.Models.Base.ProductFilter;
    using TAccessContract = QTPriceChecker.Logic.Contracts.Base.IProductsAccess<QTPriceChecker.Logic.Entities.Base.Product>;
    ///
    /// Generated by the generator
    ///
    public sealed partial class ProductsController : Controllers.FilterGenericController<TAccessModel, TViewModel, TFilterModel, TAccessContract>
    {
        ///
        /// Generated by the generator
        ///
        static ProductsController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        protected override string ControllerName => "Products";
        ///
        /// Generated by the generator
        ///
        public ProductsController(QTPriceChecker.Logic.Contracts.Base.IProductsAccess<TAccessModel> other)
        : base(other)
        {
            Constructing();
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        protected override TViewModel ToViewModel(TAccessModel accessModel, ActionMode actionMode)
        {
            var handled = false;
            var result = default(TViewModel);
            BeforeToViewModel(accessModel, actionMode, ref result, ref handled);
            if (handled == false || result == null)
            {
                result = TViewModel.Create(accessModel);
            }
            AfterToViewModel(result, actionMode);
            return BeforeView(result, actionMode);
        }
        partial void BeforeToViewModel(TAccessModel accessModel, ActionMode actionMode, ref TViewModel? viewModel, ref bool handled);
        partial void AfterToViewModel(TViewModel viewModel, ActionMode actionMode);
    }
}
